# The webRoot directory:
# the directory that the servlet engine regards as the place where applications 
# that use the servlet engine should be installed.  Generally, it is safe to leave
# this at the default setting of __AUTODETECT__.  When the SmartClient server is
# started, it logs a message to stdout telling you the autodetected path to your
# webRoot.  If this path is not your actual webRoot, then you'll want to override
# this config parameter here.
#
# Valid values: 
#
# 1. Absolute path to the webRoot directory
#
# 2. Special token:  __AUTODETECT__
#    When this token is used, SmartClient attempts to auto-detect the webRoot using
#    standard servlet APIs.  This may or may not work - depending on your
#    container type and deployment type.  For example, WAR/EAR deployments
#    on some containers never make it to disk, and so the container refuses
#    to provide the webRoot path.
#  
#    If SmartClient cannnot detect the webRoot, it sets the webRoot to
#    __USE_CONTAINER__ (see below).
#
# 3.  Special token: __USE_CONTAINER__
#     When this token is used, SmartClient uses standard servet APIs for accessing
#     filesystem resources.  This is slower than direct file access and, since
#     the servlet APIs provide no mechanism for writing to disk, means that some
#     development tools like the FileAssembler will not work.
#
webRoot: __AUTODETECT__

# if you've moved the isomorphic directory from its default location in webRoot,
# set the root-relative path to it here
#
# For example, if in your deployment the 'isomorphic' dir is in /foo/bar, then set
# then you'll need to set this to foo/bar/isomorphic
isomorphicPathRootRelative: callcenterbk/sc

# administration app
apps.adminConsole.location: $webRoot/callcenterbk/sc/tools
ui.adminConsole.location: $webRoot/callcenterbk/sc/tools

# -------------- PICK DATABASE TO USE --------------------
#
# The SmartClient SDK ships with examples that use a database as the persistence
# layer.  By default, the SDK uses a built-in version of HSQLDB, but you can
# specify a different database to use here.

# which database do you want to use?  HSQLDB is enabled by default.
#sql.defaultDatabase: HSQLDB

# If you want to use Mysql instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: Mysql

# If you want to use Oracle instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
sql.defaultDatabase: Oracle
# These are the settings for use with the Oracle database.
# hostname and port where the database server is installed
sql.Oracle.driver.serverName: 192.168.1.5
sql.Oracle.driver.portNumber: 1522
sql.Oracle.driver.databaseName: ORCLOPT2
sql.Oracle.driver.user: ccare
sql.Oracle.driver.password: ccare



#sql.Mysql.database.type: mysql
#sql.Mysql.database.ansiMode: false
#sql.Mysql.driver.serverName: 192.168.1.251
#sql.Mysql.driver.portNumber: 3306
#sql.Mysql.driver.databaseName: asteriskcdrdb
#sql.Mysql.driver.user: kaxa
#sql.Mysql.driver.password: kaxa
#sql.Mysql.autoJoinTransactions: false
#sql.Mysql.driver.networkProtocol: tcp
#sql.Mysql.interface.credentialsInURL: true
#sql.Mysql.interface.type: driverManager
#sql.Mysql.driver.driverType: thin
#sql.Mysql.driver: com.mysql.jdbc.Driver
#sql.Mysql.driver.driverName: mysql  


# If you want to use Postgres instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: PostgreSQL

# If you want to use DB2 instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: DB2

# -------------- SETTINGS FOR HSQLDB --------------------

#sql.HSQLDB.database.type: hsqldb
#sql.HSQLDB.interface.type: driverManager

#sql.HSQLDB.driver: org.hsqldb.jdbcDriver
#sql.HSQLDB.driver.url: jdbc:hsqldb:hsql://localhost/isomorphic

# -------------- SETTINGS FOR JPA --------------------

# According to JPA specifications only simple class name can be used in queries.
# Some providers follows these specs strictly (for example EclipseLink).
# Some providers allows using fully-qualified class name usage (for example Hibernate, Datanucleus).
# Setting defaluts to false - simple class name usage.
# To resolve class name collisions this setting can be set to true
# (should be used with provider supporting fully-qualified class name usage).
#jpa.useQualifiedClassName: true

# Default EMF provider implementation (implements EMFProviderInterface).
# Fully qualified class name.
# Existing implementations:
# com.isomorphic.jpa.EMFProviderLMT - for Locally Managed Transactions (LMT)
# com.isomorphic.jpa.EMFProviderNoTransactions - no transactions support
# com.isomorphic.jpa.EMFProviderCMT - for Container Managed Transactions (CMT)
jpa.emfProvider: com.isomorphic.jpa.EMFProviderLMT

# Settings for LMT type

# Name of the datasource
jpa.persistenceUnitName: ds


# Resource references for CMT type

# EntityManager resource reference name declared in /WEB-INF/web.xml.
# Example declaration:
# <persistence-context-ref>
#     <persistence-context-ref-name>persistence/em</persistence-context-ref-name>
#     <persistence-unit-name>PERSISTENCE_UNIT_NAME</persistence-unit-name>
# </persistence-context-ref>
jpa.cmt.entityManager: persistence/em

# Transaction resource reference name declared in /WEB-INF/web.xml.
# Example declaration:
# <resource-env-ref>
#     <resource-env-ref-name>persistence/tx</resource-env-ref-name>
#     <resource-env-ref-type>javax.transaction.UserTransaction</resource-env-ref-type>
# </resource-env-ref>
jpa.cmt.transaction: persistence/tx


# -------------- LOADING APP AND DATASOURCE DEFINITIONS --------------------

# Where the system looks for DataSource definition files ([dataSourceId].ds.xml or
# [dataSourceID].ds.js).  It's useful to put all your DataSources in one 
# directory since DataSources are frequently shared between applications.  
# "project.datasources" is also where the DataSource Importer tool looks 
# for available DataSources.
project.datasources: $webRoot/ds
project.ui: $webRoot/shared/ui
project.apps: $webRoot/shared/app